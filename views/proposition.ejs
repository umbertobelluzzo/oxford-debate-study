<!-- views/proposition.ejs -->
<!DOCTYPE html>
<html>

<head>
  <title>Political Opinion Study - Political Proposition</title>
  <link rel="stylesheet" href="/styles.css">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

<body>
  <div class="container">
    <div class="study-card">

      <!-- Sticky header section -->
      <div class="sticky-header">
        <div class="counter-badges">
          <div class="counter-badge-container">
            <span class="counter-badge-label">Proposition:</span>
            <div class="counter-badge"><%= index %> of <%= total %></div>
          </div>
          <div class="counter-badge-container">
            <span class="counter-badge-label">Step:</span>
            <div class="counter-badge screen-badge">1 of 2</div>
          </div>
        </div>

        <form id="propositionForm" action="/proposition" method="POST" onsubmit="return validateForm()">
          <p>Consider this political proposition:</p>
          <div class="content-container content-container-proposition">
            <div class="content-text content-text-proposition">
              <%= proposition %>
            </div>
          </div>
      </div>

      <!-- Scrollable questions section -->
      <div class="scrollable-content">
          <div class="form-group">
            <label for="knowledge">How much do you <b>know about this issue</b>?</label>
            <div class="stance-scale">
              <span>0 = No knowledge at all </span>
              <span>50 = Some understanding </span>
              <span>100 = Expert knowledge</span>
            </div>
            <input type="range" id="knowledge" name="knowledge" min="0" max="100" class="slider slider-unset" required>
            <div class="stance-value">
              <span id="knowledgeValue" class="hidden">0</span>
              <span id="knowledgeLabel" class="slider-label">Please click on the scale to set your rating</span>
            </div>
          </div>

          <div class="form-group">
            <label for="importance">How <b>important is this issue</b> to you?</label>
            <div class="stance-scale">
              <span>0 = Not important at all </span>
              <span>50 = Moderately important </span>
              <span>100 = Extremely important</span>
            </div>
            <input type="range" id="importance" name="importance" min="0" max="100" class="slider slider-unset" required>
            <div class="stance-value">
              <span id="importanceValue" class="hidden">0</span>
              <span id="importanceLabel" class="slider-label">Please click on the scale to set your rating</span>
            </div>
          </div>

          <div class="form-group">
            <label for="stance">What is your <b>level of agreement</b> with this proposition?</label>
            <div class="stance-scale">
              <span>0 = Strongly disagree </span>
              <span>50 = Ambivalent </span>
              <span>100 = Strongly agree</span>
            </div>
            <input type="range" id="stance" name="stance" min="0" max="100" class="slider slider-unset" required>
            <div class="stance-value">
              <span id="stanceValue" class="hidden">0</span>
              <span id="stanceLabel" class="slider-label">Please click on the scale to set your rating</span>
            </div>
          </div>

          <div class="form-group">
            <label for="bullets">Please explain the <b>key reasons</b> for your opinion in 2-4 bullet points.</label>
            <textarea id="bullets" name="bullets" rows="5"
              placeholder="- First point&#10;- Second point&#10;- Third point" required></textarea>
            <div id="bulletCount" class="bullet-count">Currently: 0 bullet points</div>
            <div id="bulletError" class="error-message" style="display: none; color: red; margin-top: 5px;">Please
              provide at least 2 bullet points each starting with "-".</div>
          </div>

          <div class="form-group">
            <label for="paragraph">Please expand your bullet points into a <b>short paragraph</b> (around 100-150
              words), in which you explain your opinion.</label>
            <textarea id="paragraph" name="paragraph" rows="9" required></textarea>
            <div id="wordCount" class="word-count">Currently: 0 words</div>
            <div id="wordError" class="error-message" style="display: none; color: red; margin-top: 5px;">Please write
              at least 100 words.</div>
          </div>

          <div class="form-group">
            <label for="confidence">How <b>confident are you</b> in your opinion on this issue?</label>
            <div class="stance-scale">
              <span>0 = Not confident at all </span>
              <span>50 = Moderately confident </span>
              <span>100 = Extremely confident</span>
            </div>
            <input type="range" id="confidence" name="confidence" min="0" max="100" class="slider slider-unset" required>
            <div class="stance-value">
              <span id="confidenceValue" class="hidden">0</span>
              <span id="confidenceLabel" class="slider-label">Please click on the scale to set your rating</span>
            </div>
          </div>
          <br>

          <div class="button-container">
            <button type="submit" class="button">Continue</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <script>
    // Initialize slider states
    const sliderStates = {
      'knowledge': false,
      'importance': false,
      'stance': false,
      'confidence': false
    };
    
    // Define the sliders and their corresponding value displays and labels
    const sliderConfig = {
      'knowledge': {
        valueEl: document.getElementById('knowledgeValue'),
        labelEl: document.getElementById('knowledgeLabel'),
        sliderEl: document.getElementById('knowledge')
      },
      'importance': {
        valueEl: document.getElementById('importanceValue'),
        labelEl: document.getElementById('importanceLabel'),
        sliderEl: document.getElementById('importance')
      },
      'stance': {
        valueEl: document.getElementById('stanceValue'),
        labelEl: document.getElementById('stanceLabel'),
        sliderEl: document.getElementById('stance')
      },
      'confidence': {
        valueEl: document.getElementById('confidenceValue'),
        labelEl: document.getElementById('confidenceLabel'),
        sliderEl: document.getElementById('confidence')
      }
    };

    // Add event listeners to all sliders
    Object.keys(sliderConfig).forEach(id => {
      const config = sliderConfig[id];
      
      // Track whether the user has interacted with the slider
      config.sliderEl.addEventListener('input', function() {
        // Update the value display
        config.valueEl.textContent = "Current value: " + this.value;
        
        // Show the value and hide the prompt
        config.valueEl.classList.remove('hidden');
        config.labelEl.classList.add('hidden');
        
        // Mark the slider as set
        this.classList.remove('slider-unset');
        this.classList.add('slider-set');
        
        // Update state
        sliderStates[id] = true;
      });
    });

    // Count bullet points
    const bullets = document.getElementById('bullets');
    const bulletCount = document.getElementById('bulletCount');
    const bulletError = document.getElementById('bulletError');

    bullets.oninput = function () {
      // Count bullet points by looking for lines starting with - or • or *
      const bulletLines = this.value.split('\n').filter(line =>
        line.trim().startsWith('-') ||
        line.trim().startsWith('•') ||
        line.trim().startsWith('*')
      );

      const count = bulletLines.length;
      bulletCount.textContent = count + ' bullet point' + (count !== 1 ? 's' : '');

      if (count < 2) {
        bulletCount.classList.add('below-range');
        bulletCount.classList.remove('in-range', 'above-range');
        bulletError.style.display = 'block';
      } else if (count > 4) {
        bulletCount.classList.add('above-range');
        bulletCount.classList.remove('in-range', 'below-range');
        bulletError.style.display = 'none';
      } else {
        bulletCount.classList.add('in-range');
        bulletCount.classList.remove('below-range', 'above-range');
        bulletError.style.display = 'none';
      }
    }

    // Word count for paragraph
    const paragraph = document.getElementById('paragraph');
    const wordCount = document.getElementById('wordCount');
    const wordError = document.getElementById('wordError');

    paragraph.oninput = function () {
      const words = this.value.match(/\S+/g) || [];
      const count = words.length;
      wordCount.textContent = count + ' word' + (count !== 1 ? 's' : '');

      if (count < 100) {
        wordCount.classList.add('below-range');
        wordCount.classList.remove('in-range', 'above-range');
        wordError.style.display = 'block';
      } else if (count > 150) {
        wordCount.classList.add('above-range');
        wordCount.classList.remove('in-range', 'below-range');
        wordError.style.display = 'none';
      } else {
        wordCount.classList.add('in-range');
        wordCount.classList.remove('below-range', 'above-range');
        wordError.style.display = 'none';
      }
    }

    // Form validation
    function validateForm() {
      // Check if all sliders have been set
      const allSlidersSet = Object.values(sliderStates).every(state => state === true);
      
      if (!allSlidersSet) {
        // Prevent form submission
        alert('Please set a value for all rating scales before continuing.');
        
        // Highlight unset sliders
        Object.keys(sliderStates).forEach(id => {
          if (!sliderStates[id]) {
            sliderConfig[id].sliderEl.classList.add('slider-unset');
            sliderConfig[id].labelEl.style.color = 'red';
            sliderConfig[id].labelEl.style.fontWeight = 'bold';
          }
        });
        
        return false;
      }
      
      // Count bullet points
      const bulletLines = bullets.value.split('\n').filter(line =>
        line.trim().startsWith('-') ||
        line.trim().startsWith('•') ||
        line.trim().startsWith('*')
      );

      // Count words
      const words = paragraph.value.match(/\S+/g) || [];

      // Check requirements
      let isValid = true;

      if (bulletLines.length < 2) {
        bulletError.style.display = 'block';
        bullets.focus();
        isValid = false;
      } else {
        bulletError.style.display = 'none';
      }

      if (words.length < 100) {
        wordError.style.display = 'block';
        if (bulletLines.length >= 2) {
          paragraph.focus();
        }
        isValid = false;
      } else {
        wordError.style.display = 'none';
      }

      return isValid;
    }
  </script>
</body>

</html>